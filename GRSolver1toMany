import cvxpy as cp
import networkx as nx
import matplotlib.pyplot as plt

# Initial edge list with cost and capacity
edges_with_capacity = {
    (1, 2): [1, 2],
    (1, 3): [5, 1],
    (2, 4): [2, 2],
    (2, 8): [1, 2],
    (3, 4): [2, 3],
    (3, 7): [6, 1],
    (3, 8): [5, 1],
    (4, 5): [3, 2],
    (4, 6): [4, 1],
    (5, 8): [3, 1],
    (6, 8): [4, 0],
    (6, 7): [6, 0]
}

# Make edges bidirectional
for (i, j) in list(edges_with_capacity):
    if (j, i) not in edges_with_capacity:
        cost, cap = edges_with_capacity[(i, j)]
        edges_with_capacity[(j, i)] = [cost, cap]

# Destinations: X5, X7, X10 → Regions 2, 5, 7
targets = [2, 5, 7]
source = 1
paths = []

for target in targets:
    print(f"Routing from {source} to {target}")
    
    # Filter usable edges
    available_edges = [(i, j) for (i, j), (_, cap) in edges_with_capacity.items() if cap > 0]
    Cij = { (i, j): edges_with_capacity[(i, j)][0] for (i, j) in available_edges }
    
    # Decision vars
    V = { (i, j): cp.Variable(boolean=True) for (i, j) in available_edges }

    # Objective
    objective = cp.Minimize(cp.sum([Cij[i, j] * V[i, j] for (i, j) in Cij]))

    # Constraints
    constraints = []

    # Source sends one
    constraints.append(cp.sum([V[source, j] for j in range(1, 9) if (source, j) in V]) == 1)

    # Target receives one
    constraints.append(cp.sum([V[j, target] for j in range(1, 9) if (j, target) in V]) == 1)

    # Flow conservation
    for i in range(1, 9):
        if i != source and i != target:
            inflow = cp.sum([V[j, i] for j in range(1, 9) if (j, i) in V])
            outflow = cp.sum([V[i, k] for k in range(1, 9) if (i, k) in V])
            constraints.append(inflow == outflow)

    # Solve
    prob = cp.Problem(objective, constraints)
    prob.solve(solver=cp.GLPK_MI)

    used_edges = [(i, j) for (i, j), var in V.items() if var.value and var.value > 0.5]
    
    if used_edges:
        print("Used edges:")
        for i, j in used_edges:
            print(f"{i} -> {j} (cost {Cij[i, j]})")
            edges_with_capacity[(i, j)][1] -= 1
            edges_with_capacity[(j, i)][1] -= 1
        paths.append((source, target, used_edges))
    else:
        print("❌ No feasible path found for this destination due to capacity limits.")

print("Final routes found:")
for s, d, p in paths:
    print(f"{s} → {d}: {p}")
    
for idx, (s, d, path_edges) in enumerate(paths, 1):
    G = nx.Graph()
    for (i, j), (cost, cap) in edges_with_capacity.items():
        G.add_edge(i, j, weight=cost)

    pos = nx.circular_layout(G)
    plt.figure(figsize=(8, 6))
    nx.draw_networkx_nodes(G, pos, node_color='lightblue', node_size=1000)
    nx.draw_networkx_labels(G, pos, font_size=12)
    nx.draw_networkx_edges(G, pos, width=1, edge_color='gray')
    nx.draw_networkx_edge_labels(G, pos, edge_labels={(i, j): G[i][j]['weight'] for i, j in G.edges()})
    nx.draw_networkx_edges(G, pos, edgelist=path_edges, width=4, edge_color='red')

    plt.title(f"Iteration {idx}: Optimal Path from {s} to {d}")
    plt.axis("off")
    plt.show()
